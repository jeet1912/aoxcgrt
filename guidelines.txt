If you wish to handle merge conflicts in your notebook itself:
Refer: https://nbdime.readthedocs.io/en/stable/
Run nbdime mergetool in terminal for merge conflicts. 

Before a commit:
     Convert the OxCGRT.ipynb to a python script and create/Update the pip-requirements.
     Create/Update the conda-requirements using your conda environment.

Tips:
    Create a new environment for this project.
    Run conda env list in your terminal to list the environments on your system.
    Activate the project-specific environment using conda activate project_name.
    Run conda list --export > requirements/conda-requirements.txt  to update the conda-requirements from directory of this project, which 
    will be oxcgrt. 
    Convert the notebook to the python script using jupyter nbconvert --to script OxCGRT.ipynb from code directory. This can help us to 
    view changes as well.
    Run pipreqs . --savepath requirements/pip-requirements.txt from oxcgrt directory.
    To install the requirements file, using terminal navigate to the folder containing the requirements.txt file and run the command     
    pip/pip3 install -r pip-requirements.txt
    Using conda,run conda install --file conda-requirements.txt/pip-requirements.txt to install all the necessary dependencies for the 
    project.

    

TODO:
create a readme.md file to make it appear on the main repo page.
CHECKPOINT VARIABLES TO STORE RESULTS!

HP: 
1. Mortality rate column. (handle missing populations)
2. life_expectancy, age (if not represented in 2), extreme poverty, hospital beds per 1000
3. Correlation matrix with selected features.
4. Subheadings for easier navigation.
5. Use the plots for Confirmed cases to plot mortality rate. (I've used log scale for cases, may not be applicable for mortality rate)
6. Sample code for creating new categories: 

import pandas as pd

# Assuming 'df' is your DataFrame and it has a 'StringencyIndex_Average' column
quantiles = df['StringencyIndex_Average'].quantile([0.25, 0.5, 0.75])

def assign_category(value):
    if value <= quantiles.iloc[0]:
        return 'Low_SI'
    elif value <= quantiles.iloc[1]:
        return 'Medium_SI'
    elif value <= quantiles.iloc[2]:
        return 'High_SI'
    else:
        return 'VeryHigh_SI'

df['StringencyCategory'] = df['StringencyIndex_Average'].apply(assign_category)


LP: 
Missing values for GDP and Population.
creating functions for plots.

Modelling

for iteration in iterations
    create model
    calculate score appropriate for that model
    append metric and iterations to a dictionary for that model

plot it





To suppress all warnings (not recommended)
    import warnings
    warnings.filterwarnings("ignore")
